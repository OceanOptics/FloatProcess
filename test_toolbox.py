#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author: nils
# @Date:   2016-03-10 16:02:19
# @Last Modified by:   nils
# @Last Modified time: 2017-03-15 13:23:53

# Test import_data set of function
from process import *
from toolbox import *

# Parameters
dir_data = '/Users/nils/Documents/UMaine/Lab/data/NAAMES/floats/RAW_EOT/'
dir_cfg = '/Users/nils/Documents/UMaine/Lab/data/NAAMES/floats/param/'
dir_www = '/Users/nils/Documents/MATLAB/Float_DB/output/'
fn_profile = dir_data + 'n0572/0572.010.msg'
fn_float_cfg = dir_cfg + 'n0572_cfg.json'
fn_float_status = dir_www + 'NAAMES_float_status.json'

disp = False

# Quick test
if True:
  # fchl = [1, 1.5, 2, 2.5, 3.1, 3.4, 3.2, 1.5, 1, 0.5, 0, 0, 0]
  # bbp = [3, 2.5, 4, 2.9, 3.1, 3.4, 3.2, 1.5, 1, 0.5, 0, 0, 0]
  # par = [1200, 800, 450, 200, 90, 80, 30, 20, 10, 9, 8, 7, 6]
  # p = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
  # print(estimate_zeu(np.array(p, dtype="float"), np.array(par, dtype="float")))

  p= [0.6  ,
1.8  ,
4.0  ,
6.0  ,
8.1  ,
10.0 ,
12.0 ,
14.0 ,
16.0 ,
18.0 ,
20.0 ,
22.0 ,
24.0 ,
26.0 ,
28.0 ,
30.0 ,
32.0 ,
34.0 ,
36.0 ,
38.0 ,
40.0 ,
42.0 ,
44.0 ,
46.0 ,
48.0 ,
50.0 ,
52.0 ,
54.0 ,
56.0 ,
58.0 ,
60.0 ,
62.0 ,
64.0 ,
66.0 ,
68.0 ,
70.0 ,
72.0 ,
74.0 ,
76.0 ,
78.0 ,
80.0 ,
82.0 ,
84.0 ,
86.0 ,
88.0 ,
90.0 ,
92.0 ,
94.0 ,
96.0 ,
98.0 ,
100.0,
102.0,
104.0,
106.0,
108.0,
110.0,
112.0,
114.0,
116.0,
118.0,
120.0,
122.0,
124.0,
126.0,
128.0,
130.0,
132.0,
134.0,
136.0,
138.0,
140.0,
142.0,
144.0,
146.0,
148.0,
150.0,
152.0,
154.0,
156.0,
158.0,
160.0,
161.9,
163.9,
166.0,
168.0,
170.0,
172.0,
174.0,
176.0,
178.0,
180.0,
182.0,
184.0,
186.0,
188.0,
190.0,
192.0,
194.0,
196.0,
198.0,
200.0,
202.0,
204.0,
206.0,
208.0,
210.0,
212.0,
214.0,
216.0,
218.0,
220.0,
222.0,
224.0,
226.0,
228.0,
230.0,
232.0,
234.0,
236.0,
238.0,
240.0,
242.0,
244.0,
246.0,
248.0,
250.0,
252.0,
254.0,
256.0,
258.0,
260.0,
262.0,
264.0,
266.0,
268.0,
270.0,
271.9,
274.0,
276.0,
278.0,
280.0,
282.0,
284.0,
286.0,
288.0,
290.0,
292.0,
294.0,
296.0,
298.0,
300.0,
302.0,
304.0,
306.0,
308.0,
310.0,
312.0,
314.0,
316.0,
318.0,
320.0,
322.0,
324.0,
326.0,
328.0,
330.0,
332.0,
334.0,
336.0,
338.0,
340.0,
342.0,
344.0,
346.0,
348.0,
350.0,
352.0,
354.0,
356.0,
358.0,
360.0,
362.1,
364.1,
366.0,
368.0,
370.0,
372.0,
374.0,
376.0,
378.0,
380.0,
382.0,
384.0,
386.0,
388.0,
390.0,
392.0,
394.0,
396.0,
398.0,
400.0,
402.0,
404.0,
406.0,
408.0,
410.0,
412.0,
414.0,
416.0,
418.0,
420.0,
422.0,
424.0,
426.0,
428.0,
430.0,
432.0,
434.0,
436.0,
438.0,
440.0,
442.0,
444.0,
446.0,
448.0,
450.0,
452.0,
454.0,
456.0,
458.0,
459.9,
462.0,
464.0,
466.0,
468.0,
470.0,
472.0,
474.0,
476.0,
478.0,
480.0,
482.0,
484.0,
486.0,
488.0,
490.0,
492.0,
494.0,
496.0,
498.0,
500.0,
504.5]
  sigma = [26.6057616001,
26.6054022169,
26.6141587798,
26.6212719917,
26.6311709094,
26.6395129608,
26.647837666 ,
26.656614345 ,
26.6661548216,
26.6739401893,
26.6834798163,
26.691521499 ,
26.7008646171,
26.7089055087,
26.7179366661,
26.7265143713,
26.7345358269,
26.7440850371,
26.752105738 ,
26.7608901065,
26.7699008279,
26.7789146073,
26.7874744528,
26.7962606782,
26.8050465121,
26.8128410835,
26.8206273698,
26.8288672237,
26.8389444219,
26.8484842839,
26.8572598533,
26.8658078728,
26.8748920452,
26.8861216725,
26.8944405351,
26.9029046922,
26.9124412891,
26.9215225124,
26.9312044762,
26.9390653918,
26.9480635234,
26.9568337106,
26.9648398265,
26.9761279393,
26.9859687948,
26.9952731725,
27.0048849561,
27.0142680331,
27.0231146367,
27.0326446801,
27.0415594583,
27.0504721771,
27.0592341521,
27.0677676223,
27.0763006213,
27.0855966297,
27.0939004089,
27.1031953781,
27.1118047228,
27.1256915138,
27.1388016707,
27.1458783655,
27.1547863731,
27.1639995877,
27.1776293002,
27.1911110387,
27.2003975866,
27.2089205389,
27.2174430209,
27.2268838696,
27.2362504549,
27.244993322 ,
27.2555731631,
27.2663822438,
27.2784136579,
27.2869327843,
27.2966739653,
27.3079401888,
27.3159241945,
27.3310891079,
27.3428145441,
27.3553254954,
27.3675105593,
27.3791396203,
27.38643156  ,
27.400916855 ,
27.4164040934,
27.4277513651,
27.4400173649,
27.4530454616,
27.4604205525,
27.4693952871,
27.496640637 ,
27.5212247854,
27.5393807846,
27.5502458713,
27.5606453269,
27.5712957421,
27.580249087 ,
27.5971307677,
27.6072570408,
27.6168757066,
27.6302603428,
27.6422337712,
27.654131941 ,
27.6686157665,
27.6856204583,
27.6971407661,
27.7090962457,
27.7191014748,
27.7268878256,
27.7361277791,
27.7513120301,
27.7633735066,
27.77799262  ,
27.7866773185,
27.7982209975,
27.8084341654,
27.8177589049,
27.8260979693,
27.8352016503,
27.8435494317,
27.8536565938,
27.8650964008,
27.8753234967,
27.8841082483,
27.8933312789,
27.9031002387,
27.9145142638,
27.9271308439,
27.936021975 ,
27.9445837443,
27.9540188126,
27.962249405 ,
27.972232078 ,
27.9828718572,
27.9912146557,
28.0022976634,
28.0110806666,
28.0206261749,
28.0317018331,
28.0419007434,
28.0519921776,
28.061756359 ,
28.0718467662,
28.0813907691,
28.0914800755,
28.1013498881,
28.1105636155,
28.1196687389,
28.1281183838,
28.1373312188,
28.1471991518,
28.1558679223,
28.1649756093,
28.1751746881,
28.184713522 ,
28.1956710771,
28.2051002992,
28.2149649929,
28.2251529287,
28.2347976737,
28.2437883768,
28.2531086944,
28.2618809649,
28.271958989 ,
28.2819312   ,
28.2907022618,
28.3000210049,
28.3090089773,
28.3194052468,
28.3305542048,
28.3402939914,
28.3532718735,
28.3638574338,
28.3729559579,
28.3827037742,
28.3909356524,
28.4002497311,
28.410096508 ,
28.4188605686,
28.4297939663,
28.4389896391,
28.4491414102,
28.461004604 ,
28.4716853246,
28.4837257188,
28.4951350675,
28.5077041265,
28.5179021063,
28.5297171427,
28.5384380124,
28.5489041996,
28.561446882 ,
28.5713997603,
28.5860281123,
28.5989523094,
28.6123622665,
28.6275065256,
28.6437312764,
28.6582239816,
28.6726032497,
28.6881264056,
28.7014054822,
28.713232297 ,
28.7264399874,
28.7405530567,
28.7570136186,
28.7696069112,
28.7804398166,
28.7917328075,
28.8034302718,
28.8151212847,
28.8241500565,
28.8334843868,
28.8447093229,
28.8554149204,
28.8693144562,
28.8818088152,
28.8906555585,
28.902670984 ,
28.9177418766,
28.9300784398,
28.9419593466,
28.9525148324,
28.9629712463,
28.9756865508,
28.9908314412,
29.0040014361,
29.0170786825,
29.029813049 ,
29.0400162993,
29.0541910898,
29.0659084784,
29.0810704586,
29.0963550098,
29.1097423538,
29.1211303566,
29.1315415429,
29.1423241518,
29.1529081705,
29.1627219772,
29.1776083327,
29.1868559205,
29.1951440016,
29.2045987411,
29.2157974662,
29.2283270804,
29.2385316403,
29.2502551459,
29.2589071248,
29.2909658214]

  MLD, MLD_index = estimate_mld(np.array(p, dtype="float"), np.array(sigma, dtype="float"), 0.03)
  print(MLD, MLD_index)

# Test import_data
if False:
  float_profile = import_msg(fn_profile)
  if disp:
      print(float_profile)

  float_cfg = import_usr_cfg(fn_float_cfg)
  if disp:
      print(float_cfg)


# Test proc_data
if False:
  # General calibration  equation
  su = count2su(np.array([250, 255, 254, 120, 60, 55, 50]),
                {'scale_factor': 0.012, 'dark_count': 49},
                'scale_factor * (_count - dark_count)')
  if disp:
      print(su)
  su = count2su(np.array([736386, 616459, 538043, 464632,
                          425340, 394359, 332172]),
                {"a": [332264.4, 3.04020426149e-4],
                 "im": 1.3589},
                'a[1] * (_count - a[0]) * im')
  if disp:
      print(su)

  # Specific calibration equation
  beta_L0 = eco_calibration(
      np.array(float_profile['obs']['beta']),
      float_cfg['sensors']['ECO']['beta'])
  fchl_L0 = eco_calibration(
      np.array(float_profile['obs']['fchl']),
      float_cfg['sensors']['ECO']['fchl'])
  par_L0 = radiometer_calibration(
      np.array(float_profile['obs']['par'], dtype='float'),
      float_cfg['sensors']['Radiometer']['par'])
  o2_t = o2_t_calibration(
      np.array(float_profile['obs']['o2_t']),
      float_cfg['sensors']['O2']['o2_t'])
  o2_c_L0 = o2_phase_calibration(
      np.array(float_profile['obs']['o2_ph']), o2_t,
      float_cfg['sensors']['O2']['o2_ph'])
  # O2 Corrections
  o2_p_corr = o2_pressure_correction(o2_t, np.array(float_profile['obs']['p']))
  o2_s_corr = o2_salinity_correction(o2_t,
                                     np.array(float_profile['obs']['s']))
  o2_c_L1 = [o2_c_L0[i] * o2_p_corr[i] * o2_s_corr[i]
             for i in range(0, len(o2_c_L0))]
  # FCHL corrections
  start_npq = is_npq(np.array(float_profile['obs']['p']), par_L0)
  if disp:
    print(start_npq)
  if start_npq:
    fchl_L1 = npq_correction(np.array(float_profile['obs']['p']),
                             fchl_L0, start_npq,
                             _method='Sackmann',
                             _bbp=np.array(float_profile['obs']['beta']))
    fchl_L1 = npq_correction(np.array(float_profile['obs']['p']),
                             fchl_L0, start_npq,
                             _method='Xing')
    fchl_L1 = npq_correction(np.array(float_profile['obs']['p']),
                             fchl_L0, start_npq,
                             _method='Xing2')

  # Compute extra product
  bbp = estimate_bbp(beta_L0,
                     np.array(float_profile['obs']['t']),
                     np.array(float_profile['obs']['s']),
                     _lambda=700, _theta=150)
  if disp:
    print(bbp)
  # Estimate Cphyto
  Cphyto = estimate_cphyto(bbp, _lambda=700)
  if disp:
    print(Cphyto)
  # Estimate POC
  POC = estimate_poc(bbp, _lambda=700)
  if disp:
    print(POC)

  Zeu = estimate_zeu(np.array(float_profile['obs']['p'], dtype="float"),
                     par_L0)
  if disp:
    print(par_L0)
  if False:
    print(Zeu)

  # Test helpers
  x = np.linspace(0, 10, 100)
  # Add random error on y
  e = np.random.normal(size=len(x))
  y = x + e
  results = regress2(x, y, _method_type_2="reduced major axis",
                     _need_intercept=False)
  if disp:
    print(results)

  # Test estimate_betasw
  _t = np.array([10, 20])
  _s = np.array([35, 36])
  _lambda = np.array([700, 440])
  res = estimate_betasw(_t, _s, _lambda=_lambda)
  if disp:
    print(res)
  if abs(res[0] - 5.9937e-5) > 1e-9:
    print("Warning:betasw")


# Test dashboard
if False:
  update_float_status(
      fn_float_status, 'n0572', wmo='5902462', dt_last=datetime.today())
